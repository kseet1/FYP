/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Simulator;

import static Simulator.Vehicle.EAST;
import static Simulator.Vehicle.NORTH;
import static Simulator.Vehicle.SOUTH;
import static Simulator.Vehicle.WEST;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.image.ImageObserver;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author KSEET_000
 */
public class SimulatorGUI extends javax.swing.JFrame {

    private static Map virtualMap;
    private static LinkedList<Vehicle> vehicles = new LinkedList<>();
    private static LinkedList<Color> colors = new LinkedList<>(Arrays.asList(Color.BLUE, Color.CYAN, Color.GREEN, Color.MAGENTA, Color.ORANGE, Color.PINK, Color.YELLOW));
    private static CyclicAlgorithm cyclicAlgorithm;
    private static NoncyclicAlgorithm noncyclicAlgorithm;
    private AlgorithmThread algorithmThread;
    private MonitorThread monitorThread;
    private FireThread fireThread;
    private Thread thread1;
    private Thread thread2;
    private Thread thread3;
    private LineChart discoveryTimeChart;
    private LineChart algorithmComparisonChart;
    private int xDimension;
    private int yDimension;
    //private int avgTimeTaken;    //to measure the average time taken for a node to be visited
    //private int avgDiscoveryTime;   //to measure the average time taken to discover a fire
    //private int longestTimeTaken;
    //acts a measure of performance

    /**
     * Creates new form SimulatorGUI
     */
    DefaultTableModel model;

    public SimulatorGUI() {
        initComponents();
        model = (DefaultTableModel) vehicleTable.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MapPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonGenerateMap = new javax.swing.JButton();
        jSpinnerXDim = new javax.swing.JSpinner();
        jSpinnerYDim = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vehicleTable = new javax.swing.JTable() {
            public Component prepareRenderer(TableCellRenderer r, int rw, int col) {
                Component c = super.prepareRenderer(r, rw, col);
                c.setBackground(Color.WHITE);
                if(col==2) {
                    c.setBackground(vehicles.get(rw).getColor());
                }
                return c;
            }
        };
        jButtonEditSpeed = new javax.swing.JButton();
        jButtonRemoveVehicle = new javax.swing.JButton();
        jButtonAddVehicle = new javax.swing.JButton();
        jButtonRunAlgorithm = new javax.swing.JButton();
        jButtonStopAlgorithm = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jSpinnerHotspots = new javax.swing.JSpinner();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1024, 768));

        MapPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Map"));
        MapPanel.setPreferredSize(new java.awt.Dimension(600, 600));
        MapPanel.setLayout(new java.awt.GridLayout(25, 25));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Control Panel"));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Map Dimension"));

        jLabel1.setText("X-Axis:");

        jLabel2.setText("Y-Axis:");

        jLabel3.setText("grids");

        jLabel4.setText("grids");

        jButtonGenerateMap.setText("Generate Map");
        jButtonGenerateMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateMapActionPerformed(evt);
            }
        });

        jSpinnerXDim.setModel(new javax.swing.SpinnerNumberModel(10, 4, 100, 2));
        ((JSpinner.DefaultEditor)jSpinnerXDim.getEditor()).getTextField().setEditable(false);

        jSpinnerYDim.setModel(new javax.swing.SpinnerNumberModel(10, 4, 100, 2));
        ((JSpinner.DefaultEditor)jSpinnerYDim.getEditor()).getTextField().setEditable(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinnerXDim, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinnerYDim)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)))
                    .addComponent(jButtonGenerateMap))
                .addContainerGap(180, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jSpinnerXDim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSpinnerYDim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jButtonGenerateMap)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuration"));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cyclic Algorithm", "Non-Cyclic Algorithm" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Optimization Algorithm:");

        vehicleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vehicle Number", "Speed", "Colour"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vehicleTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(vehicleTable);

        jButtonEditSpeed.setText("Edit Speed");
        jButtonEditSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditSpeedActionPerformed(evt);
            }
        });

        jButtonRemoveVehicle.setText("Remove Vehicle");
        jButtonRemoveVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveVehicleActionPerformed(evt);
            }
        });

        jButtonAddVehicle.setText("Add Vehicle");
        jButtonAddVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddVehicleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonAddVehicle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemoveVehicle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEditSpeed)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEditSpeed)
                    .addComponent(jButtonRemoveVehicle)
                    .addComponent(jButtonAddVehicle))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButtonRunAlgorithm.setText("Run Algorithm");
        jButtonRunAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunAlgorithmActionPerformed(evt);
            }
        });

        jButtonStopAlgorithm.setText("Stop Algorithm");
        jButtonStopAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopAlgorithmActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Performance"));

        jLabel11.setText("Avg. Time Taken to Discover Fire:");

        jTextField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField3.setText("");
        jTextField3.setEnabled(false);

        jLabel12.setText("msec");

        jLabel14.setText("Time Taken to Discover Last Fire: ");

        jTextField4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField4.setText("");
        jTextField4.setEnabled(false);

        jLabel15.setText("msec");

        jLabel16.setText("Worst Time Taken to Discover Fire:");

        jTextField5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField5.setText("");
        jTextField5.setEnabled(false);

        jLabel17.setText("msec");

        jLabel18.setText("No. of Fires Discovered:");

        jTextField6.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField6.setText("");
        jTextField6.setEnabled(false);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel14)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(283, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Hotspots"));

        jLabel13.setText("No. of Hotspots:");

        jSpinnerHotspots.setModel(new javax.swing.SpinnerNumberModel(1, 0, 5, 1));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinnerHotspots, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jSpinnerHotspots, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButtonRunAlgorithm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonStopAlgorithm))
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRunAlgorithm)
                    .addComponent(jButtonStopAlgorithm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.setToolTipText("");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButtonStopAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopAlgorithmActionPerformed
        algorithmThread.terminate(true);
        monitorThread.terminate(true);
        fireThread.terminate(true);
        try {
            thread1.join(1);
            thread2.join(1);
            thread3.join(1);
        } catch (InterruptedException ex) {
            Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        jButtonGenerateMap.setEnabled(true);
        jButtonRunAlgorithm.setEnabled(true);
        jComboBox1.setEnabled(true);
    }//GEN-LAST:event_jButtonStopAlgorithmActionPerformed

    private void jButtonRunAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunAlgorithmActionPerformed
        // TODO add your handling code here:
        generateMap();
        //instantiate vehicle objects
        resetVehicles();
        for (Vehicle vehicle : vehicles) {
            virtualMap.updateMovement(vehicle);
        }

        //reset the textfields that are displaying performance
        resetTextFields();

        //reset the algorithm
        cyclicAlgorithm = null;
        noncyclicAlgorithm = null;

        if (jComboBox1.getSelectedIndex() == 0) {
            cyclicAlgorithm = new CyclicAlgorithm(vehicles, virtualMap);
        }
        if (jComboBox1.getSelectedIndex() == 1) {
            noncyclicAlgorithm = new NoncyclicAlgorithm(vehicles, virtualMap);
        }

        //run algorithm, monitor, fire threads
        algorithmThread.terminate(false);
        monitorThread.terminate(false);
        fireThread.terminate(false);
        try {
            thread1.join(1);
            thread2.join(1);
            thread3.join(1);
        } catch (InterruptedException ex) {
            Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        jButtonGenerateMap.setEnabled(false);
        jButtonRunAlgorithm.setEnabled(false);
        jComboBox1.setEnabled(false);
    }//GEN-LAST:event_jButtonRunAlgorithmActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButtonGenerateMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateMapActionPerformed
        // TODO add your handling code here:
        generateMap();
    }//GEN-LAST:event_jButtonGenerateMapActionPerformed

    private void jButtonEditSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditSpeedActionPerformed
        // TODO add your handling code here:
        //JOptionPane.showInputDialog("Enter your name");
        JOptionPane optionPane = new JOptionPane();
        JSlider slider = getSlider(optionPane);
        optionPane.setMessage(new Object[]{"Select a value: ", slider});
        optionPane.setMessageType(JOptionPane.QUESTION_MESSAGE);
        //optionPane.setOptionType(JOptionPane.OK_OPTION);
        JDialog dialog = optionPane.createDialog(this, "Edit Vehicle Speed");
        dialog.setVisible(true);
        //save the edited speed to the selected vehicle
        try {
            model.setValueAt(optionPane.getInputValue(), vehicleTable.getSelectedRow(), 1);
            vehicles.get(vehicleTable.getSelectedRow()).setSpeed((int) optionPane.getInputValue());
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButtonEditSpeedActionPerformed

    private void jButtonAddVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddVehicleActionPerformed
        // TODO add your handling code here:
        if (vehicles.size() < 7) {
            vehicles.add(new Vehicle(1, 1, 1, SOUTH, getColor()));
            //update the table
            model.setRowCount(0);
            for (int i = 0; i < vehicles.size(); i++) {
                model.insertRow(model.getRowCount(), new Object[]{i + 1, vehicles.get(i).getSpeed(), ""});
            }
        }
    }//GEN-LAST:event_jButtonAddVehicleActionPerformed

    private void jButtonRemoveVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveVehicleActionPerformed
        // TODO add your handling code here:
        try {
            Vehicle vehicle = vehicles.get(vehicleTable.getSelectedRow());
            vehicles.remove(vehicleTable.getSelectedRow());
            model.removeRow(vehicleTable.getSelectedRow());
            //update the table
            model.setRowCount(0);
            for (int i = 0; i < vehicles.size(); i++) {
                model.insertRow(model.getRowCount(), new Object[]{i + 1, vehicles.get(i).getSpeed(), ""});
            }
            virtualMap.removeVehicle(vehicle);
        } catch (Exception e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_jButtonRemoveVehicleActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private JSlider getSlider(final JOptionPane optionPane) {
        JSlider slider = new JSlider();
        slider.setMajorTickSpacing(1);
        slider.setMaximum(5);
        slider.setMinimum(1);
        slider.setValue(1);
        slider.setPaintTicks(true);
        slider.setPaintLabels(true);
        optionPane.setInputValue(new Integer(1));
        ChangeListener changeListener = new ChangeListener() {
            public void stateChanged(ChangeEvent changeEvent) {
                JSlider theSlider = (JSlider) changeEvent.getSource();
                if (!theSlider.getValueIsAdjusting()) {
                    optionPane.setInputValue(new Integer(theSlider.getValue()));
                }
            }
        };
        slider.addChangeListener(changeListener);
        return slider;
    }

    private void generateMap() {
        this.xDimension = (int) jSpinnerXDim.getValue();
        this.yDimension = (int) jSpinnerYDim.getValue();
        System.out.println("xAxis: " + xDimension);
        System.out.println("yAxis: " + yDimension);

        MapPanel.removeAll();
        MapPanel.setLayout(new java.awt.GridLayout(yDimension + 2, xDimension + 2));
        virtualMap = new Map(xDimension + 2, yDimension + 2, (int) jSpinnerHotspots.getValue());

        for (int j = 0; j < virtualMap.getYDimension(); j++) {
            for (int i = 0; i < virtualMap.getXDimension(); i++) {
                JPanel grid = new JPanel();
                grid.setMinimumSize(new Dimension(1, 1));
                grid.setPreferredSize(new Dimension(1, 1));
                grid.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
                colorGrid(i, j, grid);
                MapPanel.add(grid);
            }
        }
        MapPanel.repaint();
        MapPanel.revalidate();
        System.out.println("Map Generated");    //for debugging
    }

    private void updateGUI(Map virtualMap) {

        for (int j = 0; j < virtualMap.getYDimension(); j++) {
            for (int i = 0; i < virtualMap.getXDimension(); i++) {
                Component grid = MapPanel.getComponent(j * virtualMap.getXDimension() + i);
                colorGrid(i, j, grid);
                grid.repaint();
                grid.revalidate();
            }
        }
    }

    private Color getColor() {

        boolean notUsed = false;    //flag to check if color is used by any vehicle

        for (Color color : colors) {
            notUsed = false;
            for (Vehicle vehicle : vehicles) {
                if (vehicle.getColor() == color) {
                    notUsed = true;
                    break;  //break loop and check next color
                }
            }
            if (notUsed == false) {
                return color;
            }
        }
        return null;
    }

    private void colorGrid(int x, int y, Component grid) {
        Node node = virtualMap.getNode(x, y);

        if (!node.isOccupied() && !node.isWall() && !node.isOnFire()) {    //empty node
            grid.setBackground(Color.LIGHT_GRAY);
        } else if (node.isWall()) { //wall
            grid.setBackground(Color.DARK_GRAY);
        } else if (node.isOccupied()) { //vehicle
            LinkedList<Vehicle> tmpList = node.getVehicles();
            //int index = vehicles.indexOf(tmpList.getFirst());
            Vehicle vehicle = tmpList.getFirst();
            grid.setBackground(vehicle.getColor());

        } else if (node.isOnFire()) { //fire
            grid.setBackground(Color.RED);
        }
    }

    private void resetVehicles() {
        for (Vehicle vehicle : vehicles) {
            vehicle.resetPosition();
        }
    }

    private void resetTextFields() {
        jTextField3.setText("0.0");
        jTextField4.setText("0.0");
        jTextField5.setText("0.0");
        jTextField6.setText("0");
    }

    private void initialize() {
        generateMap();
        algorithmThread = new AlgorithmThread();
        monitorThread = new MonitorThread();
        fireThread = new FireThread();
        thread1 = new Thread(algorithmThread);
        thread2 = new Thread(monitorThread);
        thread3 = new Thread(fireThread);

        thread1.start();
        thread2.start();
        thread3.start();
    }

    public class MonitorThread implements Runnable {

        private boolean terminate = true;
        private int longestTimeTaken = 0;
        private int avgTimeTaken = 0;
        private int totalTime = 0;
        private int numberOfFires = 0;
        private double lastUpdateTime = 0;
        private double discoveryTime = 0;
        private double worstDiscoveryTime = 0;
        private ArrayList<Double> discoveryTimes = new ArrayList<>();

        public void run() {
            System.out.println("Running monitoring thread!");

            discoveryTimeChart = new LineChart("Time taken to discover fire", "nth Fire", "Time(s)");
            discoveryTimeChart.setSize(450, 350);
            discoveryTimeChart.setVisible(true);
            discoveryTimeChart.addValue(0, "Time", "0");
            discoveryTimeChart.addValue(0, "Average Time", "0");
            
            
            algorithmComparisonChart = new LineChart("Algorithms' Performance Comparison", "nth Fire", "Estimated Time(s)");
            algorithmComparisonChart.setSize(450, 350);
            algorithmComparisonChart.setVisible(true);
            algorithmComparisonChart.addValue(0, "Cyclic Algorithm", "0");
            algorithmComparisonChart.addValue(0, "Sweeping Algorithm", "0");

            lastUpdateTime = System.currentTimeMillis();
            boolean reset = false;
            while (true) {
                while (this.terminate) {
                    try {
                        reset = true;
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                if (reset) {
                    discoveryTimeChart.clear();
                    discoveryTimeChart.addValue(0, "Time", "0");
                    discoveryTimeChart.addValue(0, "Average Time", "0");
                    longestTimeTaken = 0;
                    discoveryTime = 0;
                    numberOfFires = 0;
                    worstDiscoveryTime = 0;
                    discoveryTimes.clear();
                    reset = false;
                }

                for (int j = 0; j < virtualMap.getYDimension(); j++) {
                    for (int i = 0; i < virtualMap.getXDimension(); i++) {
                        if (virtualMap.getNumberOfFire() < 1) {
                            Node currNode = virtualMap.getNode(i, j);
                            discoveryTime = currNode.getFireDiscoveryTime();
                            if (discoveryTime != 0) {
                                discoveryTimes.add(discoveryTime);
                                if (worstDiscoveryTime < discoveryTime) {
                                    worstDiscoveryTime = discoveryTime;
                                    jTextField5.setText(String.valueOf(worstDiscoveryTime));
                                }
                                jTextField4.setText(String.valueOf(discoveryTime));
                                totalTime = 0;
                                for (double time : discoveryTimes) {
                                    totalTime += time;
                                }
                                jTextField3.setText(String.valueOf(totalTime / discoveryTimes.size()));
                                jTextField6.setText(String.valueOf(discoveryTimes.size()));
                            }
                        }
                    }
                }
                if (discoveryTimes.size() != numberOfFires) {
                    numberOfFires = discoveryTimes.size();
                    if (!discoveryTimes.isEmpty()) {
                        discoveryTimeChart.addValue((double) discoveryTimes.get(discoveryTimes.size() - 1) / 1000, "Time", String.valueOf(numberOfFires));
                        discoveryTimeChart.addValue((double) totalTime/numberOfFires / 1000, "Average Time", String.valueOf(numberOfFires));
                        if(jComboBox1.getSelectedIndex()==0)
                            algorithmComparisonChart.addValue((double) totalTime/discoveryTimes.size() / 1000, "Cyclic Algorithm", String.valueOf(numberOfFires));
                        else if (jComboBox1.getSelectedIndex()==1)
                            algorithmComparisonChart.addValue((double) totalTime/discoveryTimes.size() / 1000, "Sweeping Algorithm", String.valueOf(numberOfFires));
                    }
                    discoveryTimeChart.revalidate();
                    algorithmComparisonChart.revalidate();
                }
            }
        }

        public void terminate(boolean terminate) {
            this.terminate = terminate;
        }
    }

    public class AlgorithmThread implements Runnable {

        private boolean terminate = true;

        public void run() {
            System.out.println("Running algorithm thread!");

            while (true) {
                while (this.terminate) {
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                updateGUI(virtualMap);
                if (jComboBox1.getSelectedIndex() == 0) {
                    cyclicAlgorithm.run();
                } else if (jComboBox1.getSelectedIndex() == 1) {
                    noncyclicAlgorithm.run();
                }
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        public void terminate(boolean terminate) {
            this.terminate = terminate;
        }
    }

    public class FireThread implements Runnable {

        private boolean terminate = true;
        private final Random randomGenerator = new Random();
        private double totalWeight = 0;
        private ArrayList<Double> probabilities = new ArrayList<>();

        @Override
        public void run() {
            while (true) {
                while (terminate) {
                    try {
                        //reset
                        totalWeight = 0;
                        probabilities.clear();
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                if (virtualMap.getNumberOfFire() < 1) {

                    totalWeight = 0;
                    probabilities.clear();

                    for (int j = 0; j < virtualMap.getYDimension(); j++) {
                        for (int i = 0; i < virtualMap.getXDimension(); i++) {
                            Node currNode = virtualMap.getNode(i, j);
                            if ((!currNode.isWall()) && (virtualMap.getNumberOfFire() < 1)) {
                                double timeGap = System.currentTimeMillis() - currNode.lastVisited();
                                double probability = function(timeGap / 1000) * currNode.getFireProbability();
                                //double probability = currNode.getFireProbability();
                                totalWeight += probability;
                                probabilities.add(probability);
                            }
                        }
                    }

                    //based on roulette-selection algorithm
                    double randomWeight = randomGenerator.nextDouble() * totalWeight;
                    double sumOfWeight = 0;
                    int index = 0;
                    for (Double probability : probabilities) {
                        sumOfWeight += probability;
                        if (randomWeight < sumOfWeight) {
                            break;
                        } else {    //randomWeight >= sumOfWeight
                            index++;
                        }
                    }
                    virtualMap.getNode(index).setOnFire(true);
                    System.out.println("Node on fire:");
                    System.out.println("x: " + virtualMap.getNode(index).getX() + " y: " + virtualMap.getNode(index).getY());
                    virtualMap.update();
                }
                try {
                    //sleep for a random amount of time
                    Thread.sleep((long) (randomGenerator.nextDouble() * 10000));
                } catch (InterruptedException ex) {
                    Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        private double function(double time) {
            return ((1 - Math.exp(-time / 10)) / (1 + Math.exp(-time / 10)));
        }

        public void terminate(boolean terminate) {
            this.terminate = terminate;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                SimulatorGUI simulatorGUI = new SimulatorGUI();
                simulatorGUI.setVisible(true);
                simulatorGUI.initialize();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MapPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAddVehicle;
    private javax.swing.JButton jButtonEditSpeed;
    private javax.swing.JButton jButtonGenerateMap;
    private javax.swing.JButton jButtonRemoveVehicle;
    private javax.swing.JButton jButtonRunAlgorithm;
    private javax.swing.JButton jButtonStopAlgorithm;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerHotspots;
    private javax.swing.JSpinner jSpinnerXDim;
    private javax.swing.JSpinner jSpinnerYDim;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTable vehicleTable;
    // End of variables declaration//GEN-END:variables
}

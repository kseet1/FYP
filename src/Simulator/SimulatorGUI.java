/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Simulator;

import static Simulator.Vehicle.EAST;
import static Simulator.Vehicle.NORTH;
import static Simulator.Vehicle.SOUTH;
import static Simulator.Vehicle.WEST;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.LinkedList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSpinner;

/**
 *
 * @author KSEET_000
 */
public class SimulatorGUI extends javax.swing.JFrame {

    private static Map virtualMap;
    private static LinkedList<Vehicle> vehicles = new LinkedList<Vehicle>();
    private static CyclicAlgorithm cyclicAlgorithm;
    private static NoncyclicAlgorithm noncyclicAlgorithm;
    private AlgorithmThread algorithmThread;
    private MonitorThread monitorThread;
    private FireThread fireThread;
    private Thread thread1;
    private Thread thread2;
    private Thread thread3;
    private int xDimension;
    private int yDimension;
    //private int avgTimeTaken;    //to measure the average time taken for a node to be visited
    //private int avgDiscoveryTime;   //to measure the average time taken to discover a fire
    //private int longestTimeTaken;
    //acts a measure of performance

    /**
     * Creates new form SimulatorGUI
     */
    public SimulatorGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MapPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonGenerateMap = new javax.swing.JButton();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner3 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1024, 768));

        MapPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Map"));
        MapPanel.setPreferredSize(new java.awt.Dimension(600, 600));
        MapPanel.setLayout(new java.awt.GridLayout(25, 25));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Control Panel"));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Map Dimension"));

        jLabel1.setText("X-Axis:");

        jLabel2.setText("Y-Axis:");

        jLabel3.setText("grids");

        jLabel4.setText("grids");

        jButtonGenerateMap.setText("Generate Map");
        jButtonGenerateMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateMapActionPerformed(evt);
            }
        });

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(4, 4, 100, 2));
        ((JSpinner.DefaultEditor)jSpinner2.getEditor()).getTextField().setEditable(false);

        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(4, 4, 100, 2));
        ((JSpinner.DefaultEditor)jSpinner3.getEditor()).getTextField().setEditable(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner2, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)))
                    .addComponent(jButtonGenerateMap))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jButtonGenerateMap)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuration"));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cyclic Algorithm", "Non-Cyclic Algorithm" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Optimization Algorithm:");

        jLabel6.setText("Number of Vehicles:");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jSpinner1))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jButton2.setText("Run Algorithm");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Stop Algorithm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Performance"));

        jLabel7.setText("Average Time Taken: ");

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1.setText("");
        jTextField1.setEnabled(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel8.setText("msec");

        jLabel9.setText("Longest Time Taken:");

        jTextField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField2.setText("");
        jTextField2.setEnabled(false);

        jLabel10.setText("msec");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.setToolTipText("");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButtonGenerateMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateMapActionPerformed
        // TODO add your handling code here:
        generateMap();
    }//GEN-LAST:event_jButtonGenerateMapActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        generateMap();
        //instantiate vehicle objects
        //for now, just instantiate one vehicle
        vehicles.clear();
        vehicles.add(new Vehicle(1, 1, 1, SOUTH));
        for (Vehicle vehicle : vehicles) {
            virtualMap.updateMovement(vehicle);
        }

        //run algorithm thread
        cyclicAlgorithm = new CyclicAlgorithm(vehicles, virtualMap);
        noncyclicAlgorithm = new NoncyclicAlgorithm(vehicles, virtualMap);
        algorithmThread.terminate(false);
        monitorThread.terminate(false);
        fireThread.terminate(false);
        try {
            thread1.join(1);
            thread2.join(1);
            thread3.join(1);
        } catch (InterruptedException ex) {
            Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        jButtonGenerateMap.setEnabled(false);
        jButton2.setEnabled(false);
        jComboBox1.setEnabled(false);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        algorithmThread.terminate(true);
        monitorThread.terminate(true);
        fireThread.terminate(true);
        try {
            thread1.join(1);
            thread2.join(1);
            thread3.join(1);
        } catch (InterruptedException ex) {
            Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        jButtonGenerateMap.setEnabled(true);
        jButton2.setEnabled(true);
        jComboBox1.setEnabled(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void generateMap() {
        this.xDimension = (int) jSpinner2.getValue();
        this.yDimension = (int) jSpinner3.getValue();
        System.out.println("xAxis: " + xDimension);
        System.out.println("yAxis: " + yDimension);

        MapPanel.removeAll();
        MapPanel.setLayout(new java.awt.GridLayout(yDimension + 2, xDimension + 2));
        virtualMap = new Map(xDimension + 2, yDimension + 2, 1);

        for (int j = 0; j < virtualMap.getYDimension(); j++) {
            for (int i = 0; i < virtualMap.getXDimension(); i++) {
                JPanel grid = new JPanel();
                grid.setMinimumSize(new Dimension(1, 1));
                grid.setPreferredSize(new Dimension(1, 1));
                grid.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
                colorGrid(i, j, grid);
                MapPanel.add(grid);
            }
        }
        MapPanel.repaint();
        MapPanel.revalidate();
        System.out.println("Map Generated");    //for debugging
    }

    private void updateGUI(Map virtualMap) {

        for (int j = 0; j < virtualMap.getYDimension(); j++) {
            for (int i = 0; i < virtualMap.getXDimension(); i++) {
                Component grid = MapPanel.getComponent(j * virtualMap.getXDimension() + i);
                colorGrid(i, j, grid);
                grid.repaint();
                grid.revalidate();
            }
        }
    }

    private void colorGrid(int x, int y, Component grid) {
        int tmpMap[][] = virtualMap.getMap();

        if (tmpMap[y][x] == 0) {
            grid.setBackground(Color.LIGHT_GRAY);
        } else if (tmpMap[y][x] == 1) {
            grid.setBackground(Color.DARK_GRAY);
        } else if (tmpMap[y][x] == 2) {
            grid.setBackground(Color.BLUE);
        } else if (tmpMap[y][x] == 3) {
            grid.setBackground(Color.RED);
        }
    }

    private void initialize() {
        generateMap();
        algorithmThread = new AlgorithmThread();
        monitorThread = new MonitorThread();
        fireThread = new FireThread();
        thread1 = new Thread(algorithmThread);
        thread2 = new Thread(monitorThread);
        thread3 = new Thread(fireThread);
       
        thread1.start();
        thread2.start();
        thread3.start();
    }

    public class MonitorThread implements Runnable {

        private boolean terminate = true;
        private int longestTimeTaken = 0;
        private int avgTimeTaken = 0;

        public void run() {
            System.out.println("Running monitoring thread!");
            int counter = 0;
            double totalTimeTaken = 0;
            while (true) {
                while (this.terminate) {
                    try {
                        counter = 0;    //reset counters
                        totalTimeTaken = 0;
                        longestTimeTaken = 0;
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                //System.out.println("monitoring algorithm running.");
                //System.out.println(avgTimeTaken);

                for (int j = 0; j < virtualMap.getYDimension(); j++) {
                    for (int i = 0; i < virtualMap.getXDimension(); i++) {
                        double timeTaken = virtualMap.getNode(i, j).timeTaken();
                        if (virtualMap.getNode(i, j).isVisited()) {
                            totalTimeTaken = totalTimeTaken + timeTaken;
                            counter++;
                            if (this.longestTimeTaken < timeTaken) {
                                this.longestTimeTaken = (int) timeTaken;
                                jTextField2.setText(String.valueOf(this.longestTimeTaken));
                            }
                        }
                    }
                }
                this.avgTimeTaken = (int) (totalTimeTaken / counter);
                jTextField1.setText(String.valueOf(this.avgTimeTaken));
            }
        }

        public void terminate(boolean terminate) {
            this.terminate = terminate;
        }
    }

    public class AlgorithmThread implements Runnable {

        private boolean terminate = true;

        public void run() {
            System.out.println("Running algorithm thread!");

            while (true) {
                while (this.terminate) {
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                System.out.println("algorithm running");
                updateGUI(virtualMap);
                if (jComboBox1.getSelectedIndex() == 0) {
                    cyclicAlgorithm.run();
                } else if (jComboBox1.getSelectedIndex() == 1) {
                    noncyclicAlgorithm.run();
                }
                System.out.println("From GUI:");
                virtualMap.printMap();
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        public void terminate(boolean terminate) {
            this.terminate = terminate;
        }
    }

    public class FireThread implements Runnable {

        private boolean terminate = true;
        private Random randomGenerator = new Random();

        @Override
        public void run() {
            while (true) {
                while (terminate) {
                    try {
                        //virtualMap.getNumberOfFire() = 0;   //reset
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (virtualMap.getNumberOfFire() < 1) {
                    for (int j = 0; j < virtualMap.getYDimension(); j++) {
                        for (int i = 0; i < virtualMap.getXDimension(); i++) {
                            Node currNode = virtualMap.getNode(i, j);
                            System.out.println("here");
                            if ((!currNode.isOnFire()) && (!currNode.isOccupied()) && (!currNode.isWall()) && (virtualMap.getNumberOfFire() < 1)) {
                                double timeGap = System.currentTimeMillis() - currNode.lastVisited();
                                double probability = randomGenerator.nextDouble() * function(timeGap / 1000);
                                System.out.println(probability);
                                if (probability >= currNode.getFireProbability()) {
                                    currNode.setOnFire(true);
                                    virtualMap.update();
                                    //virtualMap.getNumberOfFire()++;
                                }
                            }
                        }
                    }
                }
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(SimulatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        private double function(double time) {
            return ((1 - Math.exp(-time / 10)) / (1 + Math.exp(-time / 10)));
        }

        public void terminate(boolean terminate) {
            this.terminate = terminate;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                SimulatorGUI simulatorGUI = new SimulatorGUI();
                simulatorGUI.setVisible(true);
                simulatorGUI.initialize();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MapPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonGenerateMap;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
